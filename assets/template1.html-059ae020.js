import{_ as t,V as o,W as c,X as s,Y as n,Z as p,$ as e,F as l}from"./framework-c6791857.js";const i={},u=e(`<p>在现代 C++ 中，模板是一种强大的工具，它们允许编写通用代码，使得程序更加灵活和可重用。本篇博客将介绍 C++ 中的函数模板，模板参数推导，以及万能引用与引用折叠，这些都是模板编程中不可或缺的重要概念。</p><h2 id="_1-函数模板" tabindex="-1"><a class="header-anchor" href="#_1-函数模板" aria-hidden="true">#</a> 1. 函数模板</h2><p>函数模板是一种通用函数定义的方式，允许以一种泛型的方式定义函数，从而使得同一份代码能够适用于不同类型的参数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T <span class="token function">max</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span>T b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码定义了一个简单的函数模板 add，它接受两个参数，并返回它们的和。 <code>typename T</code> 表示这是一个模板参数，可以是任意类型，还可以使用 <code>class T</code> 来定义。</p><h2 id="_2-模板的使用" tabindex="-1"><a class="header-anchor" href="#_2-模板的使用" aria-hidden="true">#</a> 2. 模板的使用</h2><p>在使用模板时编译器会根据使用情况在编译期实例化使用的函数，所以是静态的不产生运行时开销。</p><p>C++ 中的模板参数推导允许编译器在调用函数模板时自动推断模板参数的类型，也可以显式的指定类型。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T <span class="token function">max</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span>T b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">{</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 函数模板 max 被推导为 max&lt;int&gt;</span>
    <span class="token generic-function"><span class="token function">max</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 传递模板类型实参，函数模板为 max&lt;double&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-模板参数推导" tabindex="-1"><a class="header-anchor" href="#_3-模板参数推导" aria-hidden="true">#</a> 3. 模板参数推导</h2><p>模板参数可以是参数的一部分，例如使用 <code>const&amp;</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时使用 <code>max(1, 2)</code> 或 <code>max&lt;int&gt;(x,x)</code> ， <code>T</code> 是 <code>int</code> ，但是函数形参类型会推导为 <code>int&amp;</code> 。</p><p>在指代不清时时无法自动推导的</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>string_literals<span class="token punctuation">;</span>   <span class="token comment">// string字面量</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Error 无法确定你的 T 到底是要 int 还是 double</span>
    <span class="token function">max</span><span class="token punctuation">(</span><span class="token string">&quot;luse&quot;</span>s<span class="token punctuation">,</span> <span class="token string">&quot;乐&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Error 无法确定你的 T 到底是要 std::string 还是const char[N]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过显式指定函数模板的（T）类型解决这种问题：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token generic-function"><span class="token function">max</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token generic-function"><span class="token function">max</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;luse&quot;</span>s<span class="token punctuation">,</span> <span class="token string">&quot;乐&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者说显式类型转换：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">max</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>string可以显式构造一个无名变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">&quot;luse&quot;</span>s<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;乐&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21),r={href:"https://zh.cppreference.com/w/cpp/language/adl",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"std::string",-1),d=s("code",null,"std::",-1),m=s("code",null,"std::max",-1),v=s("code",null,"::",-1),b=e(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">&quot;luse&quot;</span>s<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;乐&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-万能引用与引用折叠" tabindex="-1"><a class="header-anchor" href="#_4-万能引用与引用折叠" aria-hidden="true">#</a> 4. 万能引用与引用折叠</h2><p>万能引用（又叫转发引用）是 C++11 中引入的特性，通过使用 <code>&amp;&amp;</code> 符号，可以创建可以接受任意类型的引用的模板参数，即<strong>接受左值表达式那形参类型就推导为左值引用，接受右值表达式，那就推导为右值引用</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// a 是左值表达式，f 是 f&lt;int&amp;&gt; 但是它的形参类型是 int&amp;</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 10 是右值表达式，f 是 f&lt;int&gt; 但它的形参类型是 int&amp;&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g={href:"https://zh.cppreference.com/w/cpp/language/reference",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>即：<strong>右值引用的右值引用折叠成右值引用，所有其他组合均折叠成左值引用</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>  lref<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> rref<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>

lref<span class="token operator">&amp;</span>  r1 <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// r1 的类型是 int&amp;</span>
lref<span class="token operator">&amp;&amp;</span> r2 <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// r2 的类型是 int&amp;</span>
rref<span class="token operator">&amp;</span>  r3 <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// r3 的类型是 int&amp;</span>
rref<span class="token operator">&amp;&amp;</span> r4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// r4 的类型是 int&amp;&amp;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Ty</span><span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> Ty<span class="token operator">&amp;&amp;</span> <span class="token function">forward</span><span class="token punctuation">(</span>Ty<span class="token operator">&amp;</span> Arg<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Ty<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment">// 不重要</span>
<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回 int&amp;&amp; 因为 Ty 是 int，Ty&amp;&amp; 就是 int&amp;&amp;</span>
<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回 int&amp; 因为 Ty 是 int&amp;，Ty&amp;&amp; 就是 int&amp;</span>
<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回 int&amp;&amp; 因为 Ty 是 int&amp;&amp;，Ty&amp;&amp; 就是 int&amp;&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h={href:"https://mq-b.github.io/Modern-Cpp-templates-tutorial/md/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF",target:"_blank",rel:"noopener noreferrer"};function y(_,w){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("由于"),s("a",r,[n("实参依赖查找(ADL)"),p(a)]),n("，使用了 "),k,n(" 会在 "),d,n(" 命名空间下查找函数，与 "),m,n(" 重名了，解决办法是指定全局命名空间 "),v,n(" ：")]),b,s("p",null,[s("a",g,[n("引用折叠"),p(a)]),n("是 C++ 中对模板函数参数引用进行简化的规则，用于处理模板参数中的引用嵌套和组合情况。")]),f,s("p",null,[n("参考自 "),s("a",h,[n("现代C++模板教程"),p(a)])])])}const T=t(i,[["render",y],["__file","template1.html.vue"]]);export{T as default};
