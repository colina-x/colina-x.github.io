import{_ as a,V as e,W as s,$ as n}from"./framework-c6791857.js";const o={},t=n(`<p>Promise是JS异步编程中的重要概念，异步抽象处理对象，是目前比较流行Javascript异步编程解决方案之一</p><h2 id="异步编程" tabindex="-1"><a class="header-anchor" href="#异步编程" aria-hidden="true">#</a> 异步编程</h2><ul><li><p>fs 文件操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>数据库操作</p></li><li><p>AJAX</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/server&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>定时器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="为什么要用promise" tabindex="-1"><a class="header-anchor" href="#为什么要用promise" aria-hidden="true">#</a> 为什么要用Promise</h2><h3 id="_1-指定回调函数方式更灵活" tabindex="-1"><a class="header-anchor" href="#_1-指定回调函数方式更灵活" aria-hidden="true">#</a> 1.指定回调函数方式更灵活</h3><ul><li>旧：必须在启动异步任务前确定</li><li>promise：启动异步任务 =&gt; 返回promise对象 =&gt; 给promise对象绑定回调函数(甚至可以在异步任务结束后指定/多个)</li></ul><h3 id="_2-支持链式调用解决回调地狱问题" tabindex="-1"><a class="header-anchor" href="#_2-支持链式调用解决回调地狱问题" aria-hidden="true">#</a> 2.支持<code>链式调用</code>解决回调地狱问题</h3><h4 id="回调地狱" tabindex="-1"><a class="header-anchor" href="#回调地狱" aria-hidden="true">#</a> 回调地狱</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">asyncFunc1</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">asyncFunc2</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">asyncFunc3</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">asyncFunc4</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args4</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// some opeeration</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：</p><ul><li>不便于阅读</li><li>不便于异常处理</li></ul><h2 id="promise-状态" tabindex="-1"><a class="header-anchor" href="#promise-状态" aria-hidden="true">#</a> promise 状态</h2><p>实例对象的一个属性 <code>PromiseState</code></p><ul><li><code>pending</code> 未决定的</li><li><code>resolved</code> / <code>fullfilled</code> 成功</li><li><code>rejected</code> 失败</li></ul><p>只能由<code>pending</code>转为<code>resolved</code>或<code>rejected</code>，且只能改变一次</p><ol><li>resolve <code>pending =&gt; resolved</code></li><li>reject <code>pending =&gt; rejected</code></li><li>抛出异常 <code>pending =&gt; rejected</code></li></ol><h2 id="promise-对象的值" tabindex="-1"><a class="header-anchor" href="#promise-对象的值" aria-hidden="true">#</a> promise 对象的值</h2><p>实例对象的一个属性 <code>PromiseResult</code></p><p>保存着对象 <code>成功</code> 或 <code>失败</code> 的结果</p><ul><li>resolve</li><li>reject</li></ul><h2 id="promise-工作流程" tabindex="-1"><a class="header-anchor" href="#promise-工作流程" aria-hidden="true">#</a> promise 工作流程</h2><figure><img src="https://colinaa.blob.core.windows.net/img/promise工作流程.png" alt="promise 工作流程" tabindex="0" loading="lazy"><figcaption>promise 工作流程</figcaption></figure><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用API</h2><h3 id="_1-构造函数-promise-executor" tabindex="-1"><a class="header-anchor" href="#_1-构造函数-promise-executor" aria-hidden="true">#</a> 1. 构造函数 <code>Promise(executor){}</code></h3><ol><li><code>executor</code>: 执行器函数 (resolve, reject) =&gt; {}</li><li><code>resolve</code>: 成功时调用函数 value =&gt; {}</li><li><code>reject</code>: 失败时调用函数 reason =&gt; {}</li></ol><ul><li>说明：<code>executor</code> 会在 <code>Promise</code> 内部立即同步调用，异步操作在执行器中执行</li></ul><h3 id="_2-promise-prototype-then-方法-onresolved-onrejected" tabindex="-1"><a class="header-anchor" href="#_2-promise-prototype-then-方法-onresolved-onrejected" aria-hidden="true">#</a> 2. <code>Promise.prototype.then</code> 方法: (onResolved, onRejected) =&gt; {}</h3><ol><li><code>onResolved</code>: 成功的回调函数 (value) =&gt; {}</li><li><code>onRejected</code>: 失败的回调函数 (reason) =&gt; {}</li></ol><ul><li>说明：返回一个新的 Promise 对象</li></ul><h3 id="_3-promise-prototype-catch-方法-onrejected" tabindex="-1"><a class="header-anchor" href="#_3-promise-prototype-catch-方法-onrejected" aria-hidden="true">#</a> 3. <code>Promise.prototype.catch</code> 方法: (onRejected) =&gt; {}</h3><ol><li><code>onRejected</code>: 失败的回调函数 (reason) =&gt; {}</li></ol><h3 id="_4-promise-resolve-方法-value" tabindex="-1"><a class="header-anchor" href="#_4-promise-resolve-方法-value" aria-hidden="true">#</a> 4. <code>Promise.resolve</code> 方法: (value) =&gt; {}</h3><ol><li><code>value</code>: 成功的数据或 promise 对象</li></ol><ul><li>说明：返回一个成功/失败的 promise 对象，只有当 <code>value</code> 为失败的 promise 对象才是失败</li></ul><h3 id="_5-promise-reject-方法-reason" tabindex="-1"><a class="header-anchor" href="#_5-promise-reject-方法-reason" aria-hidden="true">#</a> 5. <code>Promise.reject</code> 方法: (reason) =&gt; {}</h3><ol><li><code>reason</code>: 失败的原因</li></ol><ul><li>说明：返回一个失败的 promise 对象</li></ul><h3 id="_6-promise-all-方法-promises" tabindex="-1"><a class="header-anchor" href="#_6-promise-all-方法-promises" aria-hidden="true">#</a> 6. <code>Promise.all</code> 方法: (promises) =&gt; {}</h3><ol><li><code>promises</code>: 包含n个 promise 的数组</li></ol><ul><li>说明：返回一个新的 promise 对象，只有所有 promise 都成功才成功，数据为所有 promise 数据组成的数组</li></ul><h3 id="_7-promise-race-方法-promises" tabindex="-1"><a class="header-anchor" href="#_7-promise-race-方法-promises" aria-hidden="true">#</a> 7. <code>Promise.race</code> 方法: (promises) =&gt; {}</h3><ol><li><code>promises</code>: 包含n个 promise 的数组</li></ol><ul><li>说明：返回一个新的 promise 对象，第一个完成的 promise 的结果状态就是最终的结果状态</li></ul>`,43),i=[t];function p(c,r){return e(),s("div",null,i)}const d=a(o,[["render",p],["__file","Promise.html.vue"]]);export{d as default};
